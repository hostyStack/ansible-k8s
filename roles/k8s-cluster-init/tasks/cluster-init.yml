---

- name: Clear DNS records for load balancer
  cloudflare_dns:
    zone: "{{ k8s.dns_zone }}"
    record: "{{ k8s.dns_record }}"
    type: A
    state: absent
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"
  when: cloudflare is defined and cloudflare.email is defined and cloudflare.token is defined

- name: Create DNS record for first node
  cloudflare_dns:
    zone: "{{ k8s.dns_zone }}"
    record: "{{ k8s.dns_record }}"
    type: A
    value: "{{ ansible_default_ipv4.address }}"
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"
  when: cloudflare is defined and cloudflare.email is defined and cloudflare.token is defined

- name: Create configuration directory
  file:
    path: /etc/kubernetes
    state: directory
    owner: root
    group: root
  become: yes

- name: Generate bootstrap token
  command: "kubeadm token generate"
  register: bootstrap_token
  become: yes

- name: Create configuration for kubeadm
  template:
    src: kubeadm-config.yml
    dest: /etc/kubernetes/kubeadm-config.yml
  become: yes

- name: Determine CRI socket
  stat:
    path: /var/run/containerd/containerd.sock
  become: yes
  register: containerd_sock

- name: Add parameter for CRI socket
  set_fact:
    cri_socket: "--cri-socket /var/run/containerd/containerd.sock"
  when: 'containerd_sock.stat.exists and containerd_sock.stat.issock'

- name: Bootstrap master
  command: "kubeadm init --config /etc/kubernetes/kubeadm-config.yml {{ cri_socket | default() }}"
  become: yes

- name: Fetch kubeconfig
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: cluster/
    flat: yes
  become: yes

- name: Fetch controlplane certificates
  fetch:
    src: "{{ item }}"
    dest: cluster/
    flat: yes
  become: yes
  with_items:
    - /etc/kubernetes/pki/ca.crt
    - /etc/kubernetes/pki/ca.key
    - /etc/kubernetes/pki/sa.key
    - /etc/kubernetes/pki/sa.pub
    - /etc/kubernetes/pki/front-proxy-ca.crt
    - /etc/kubernetes/pki/front-proxy-ca.key

- name: Fetch etcd certificates
  fetch:
    src: "{{ item }}"
    dest: cluster/etcd/
    flat: yes
  become: yes
  with_items:
    - /etc/kubernetes/pki/etcd/ca.crt
    - /etc/kubernetes/pki/etcd/ca.key
