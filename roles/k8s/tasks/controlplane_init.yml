---

- name: Generate bootstrap token
  command: "kubeadm token generate"
  register: bootstrap_token
  become: yes

- name: Clear DNS records for load balancer
  cloudflare_dns:
    zone: "{{ k8s.dns_zone }}"
    record: "{{ k8s.dns_record }}"
    type: A
    state: absent
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"

- name: Create DNS record for first node
  cloudflare_dns:
    zone: "{{ k8s.dns_zone }}"
    record: "{{ k8s.dns_record }}"
    type: A
    value: "{{ ansible_default_ipv4.address }}"
    account_email: "{{ cloudflare.email }}"
    account_api_token: "{{ cloudflare.token }}"

- name: Create configuration for kubeadm
  template:
    src: kubeadm.yml
    dest: /etc/kubeadm.yml
  become: yes

- name: Bootstrap master
  command: "kubeadm init --config /etc/kubeadm.yml"
  become: yes

- name: Allow all node ports
  replace:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: "- kube-apiserver"
    replace: "- kube-apiserver\n    - --service-node-port-range=1-65535"
  become: yes

- name: Determine version for weave
  shell: kubectl version | base64 | tr -d '\n'
  register: weave_version

- name: Initialize networking
  command: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f 'https://cloud.weave.works/k8s/net?k8s-version={{ weave_version.stdout_lines.0 }}'"
  when: not weave_version.failed

- name: Fetch kubeconfig
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: cluster/
    flat: yes
  become: yes

- name: Fetch join command for workers
  command: "kubeadm token create --print-join-command"
  become: yes
  register: join_command

- name: Store join command for workers
  copy:
    dest: cluster/join_command.txt
    content: "{{ join_command.stdout_lines.0 }}"
  delegate_to: 127.0.0.1

- name: Fetch controlplane certificates
  fetch:
    src: "{{ item }}"
    dest: cluster/
    flat: yes
  become: yes
  with_items:
    - /etc/kubernetes/pki/ca.crt
    - /etc/kubernetes/pki/ca.key
    - /etc/kubernetes/pki/sa.key
    - /etc/kubernetes/pki/sa.pub
    - /etc/kubernetes/pki/front-proxy-ca.crt
    - /etc/kubernetes/pki/front-proxy-ca.key

- name: Fetch etcd certificates
  fetch:
    src: "{{ item }}"
    dest: cluster/etcd/
    flat: yes
  become: yes
  with_items:
    - /etc/kubernetes/pki/etcd/ca.crt
    - /etc/kubernetes/pki/etcd/ca.key
